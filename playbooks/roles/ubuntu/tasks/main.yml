- name: Set Timezone
  timezone:
    name: America/Toronto
  register: timezone

- name: Make sure timesyncd is stopped
  systemd:
    name: systemd-timesyncd.service
    state: stopped
  when: timezone is changed

- name: Copy over the timesyncd config
  template: 
    src: ../templates/timesyncd.conf
    dest: /etc/systemd/timesyncd.conf
    owner: root
    group: root
    mode: 0644
  register: copy_timesyncd_template
  
- name: Make sure timesyncd is started
  systemd:
    name: systemd-timesyncd.service
    state: started
  when: copy_timesyncd_template is changed

- name: Set PasswordAuthentication to no in sshd_config
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication yes$'
    line: 'PasswordAuthentication no'
  register: password_auth
  
- name: restart ssh
  service:
    name: ssh
    state: restarted
  when: password_auth is changed

- name: Ensure GRUB configuration directory exists
  file:
    path: /etc/default
    state: directory

- name: Disable IPv6 with sysctl
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    state: "present"
    reload: "yes"
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6
  ignore_errors: yes

- name: Ubuntu > blacklist ipv6 in modprobe
  ansible.builtin.lineinfile:
    dest: /etc/modprobe.d/blacklist.conf
    line: 'blacklist ipv6'
    mode: '0644'
    create: true
  when: ansible_os_family == 'Debian'

- name: Ensure GRUB_CMDLINE_LINUX_DEFAULT contains "quiet splash ipv6.disable=1"
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash ipv6.disable=1"'
  register: ipv6_line1_updated

- name: Ensure GRUB_CMDLINE_LINUX contains "ipv6.disable=1"
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX='
    line: 'GRUB_CMDLINE_LINUX="ipv6.disable=1"'
  register: ipv6_line2_updated

- name: Update GRUB
  command: update-grub
  when: ipv6_line1_updated is changed or ipv6_line2_updated is changed

- name: Install unattended-upgrades and update-notifier-common
  apt:
    pkg:
      - unattended-upgrades
      - update-notifier-common
    state: present

- name: Copy over the 50unattended-upgrades config
  template: 
    src: ../templates/50unattended-upgrades
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    mode: 0644
  register: copy_50unattended_template

- name: Reconfigure unattended-upgrades
  command:
    cmd: dpkg-reconfigure -f noninteractive -plow unattended-upgrades
  when: copy_50unattended_template is changed

- name: apt update and upgrade
  apt:
    update_cache: yes
    upgrade: 'yes'

- name: Install qemu-guest-agent
  apt:
    name: qemu-guest-agent
    state: present
    update_cache: true
  become: true

- name: Update and upgrade all packages to the latest version
  apt:
    update_cache: true
    upgrade: dist

- name: Check if Docker is already installed
  command: docker --version
  ignore_errors: yes
  changed_when: false
  register: is_docker_installed

- name: Install Docker required packages
  apt:
    pkg:
      - ca-certificates
      - curl
      - gnupg
  when: is_docker_installed is failed

- name: Create directory for Docker's GPG key
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  when: is_docker_installed is failed

- name: Add Docker's official GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /etc/apt/keyrings/docker.gpg
    state: present
  when: is_docker_installed is failed

- name: Set permissions for Docker GPG key
  file:
    path: /etc/apt/keyrings/docker.gpg
    mode: '0644'
  when: is_docker_installed is failed

- name: Add Docker repository
  apt_repository:
    repo: >-
      deb [arch={{ arch_mapping[ansible_architecture] }}
      signed-by=/etc/apt/keyrings/docker.gpg]
      https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    state: present
  when: is_docker_installed is failed

- name: Install Docker if not already installed
  apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  loop:
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin
  when: is_docker_installed is failed

- name: Add user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  become: yes
  when: is_docker_installed is failed

- name: Reboot the server to apply changes
  reboot:
    msg: "Reboot initiated by Ansible for applying GRUB changes."
  when: ipv6_line1_updated is changed or ipv6_line2_updated is changed